---
import CryptoJS from 'crypto-js';

const secret = '•••••••••'; // Your verification secret key
const userId = crypto.randomUUID(); // Generate a random UUID for demo
const hash = CryptoJS.HmacSHA256(userId, secret).toString();
---

<div class="fixed bottom-20 right-5 z-40">
  <button
    id="chat-toggle"
    class="bg-primary-500 text-white p-3 rounded-full shadow-lg hover:bg-primary-600 transition-all duration-300"
    aria-label="Toggle chat"
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
    </svg>
  </button>

  <div id="chat-window" class="hidden fixed bottom-24 right-5 w-80 bg-white dark:bg-gray-800 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700">
    <div class="p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Chat Support</h3>
      <button id="close-chat" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
      </button>
    </div>

    <div id="chat-messages" class="p-4 h-80 overflow-y-auto space-y-4"></div>

    <div class="p-4 border-t border-gray-200 dark:border-gray-700">
      <form id="chat-form" class="flex gap-2">
        <input
          type="text"
          id="chat-input"
          class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
          placeholder="Type your message..."
        />
        <button
          type="submit"
          class="px-4 py-2 bg-primary-500 text-white rounded-md hover:bg-primary-600 transition-colors duration-200"
        >
          Send
        </button>
      </form>
    </div>
  </div>
</div>

<script>
  const chatToggle = document.getElementById('chat-toggle');
  const chatWindow = document.getElementById('chat-window');
  const closeChat = document.getElementById('close-chat');
  const chatForm = document.getElementById('chat-form');
  const chatInput = document.getElementById('chat-input');
  const chatMessages = document.getElementById('chat-messages');

  function addMessage(content: string, isUser: boolean) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `flex ${isUser ? 'justify-end' : 'justify-start'}`;
    
    const messageBubble = document.createElement('div');
    messageBubble.className = `max-w-[80%] p-3 rounded-lg ${
      isUser 
        ? 'bg-primary-500 text-white' 
        : 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white'
    }`;
    messageBubble.textContent = content;
    
    messageDiv.appendChild(messageBubble);
    chatMessages?.appendChild(messageDiv);
    chatMessages?.scrollTo(0, chatMessages.scrollHeight);
  }

  chatToggle?.addEventListener('click', () => {
    chatWindow?.classList.toggle('hidden');
  });

  closeChat?.addEventListener('click', () => {
    chatWindow?.classList.add('hidden');
  });

  chatForm?.addEventListener('submit', (e) => {
    e.preventDefault();
    const message = chatInput?.value.trim();
    if (!message) return;

    addMessage(message, true);
    chatInput.value = '';

    // Simulate bot response
    setTimeout(() => {
      addMessage("Thanks for your message! Our team will get back to you soon.", false);
    }, 1000);
  });
</script>